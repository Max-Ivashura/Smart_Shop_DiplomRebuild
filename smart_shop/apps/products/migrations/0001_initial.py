# Generated by Django 5.2 on 2025-05-14 18:55

import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Например: Процессоры, Видеокарты', max_length=100, unique=True, verbose_name='Название')),
                ('slug', models.SlugField(help_text='Автоматически генерируется из названия', max_length=100, unique=True, verbose_name='URL-адрес')),
                ('image', models.ImageField(blank=True, help_text='Рекомендуемый размер: 300x300px', upload_to='categories/', verbose_name='Изображение')),
                ('description', models.TextField(blank=True, help_text='Краткое описание для SEO', verbose_name='Описание')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='products.category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Например: Intel Core i9-13900K', max_length=200, verbose_name='Название')),
                ('price', models.DecimalField(decimal_places=2, help_text='Максимум 10 знаков', max_digits=10, verbose_name='Цена (руб)')),
                ('sku', models.CharField(help_text='Уникальный идентификатор', max_length=50, unique=True, verbose_name='Артикул')),
                ('is_active', models.BooleanField(default=True, help_text='Отображать товар на сайте', verbose_name='Активен')),
                ('slug', models.SlugField(blank=True, help_text='Автоматически генерируется', max_length=200, unique=True, verbose_name='URL-адрес')),
                ('warranty', models.CharField(blank=True, help_text='Например: 3 года', max_length=50, verbose_name='Гарантия')),
                ('country', models.CharField(blank=True, help_text='Например: США', max_length=100, verbose_name='Страна')),
                ('stock', models.PositiveIntegerField(default=0, help_text='Количество на складе', verbose_name='Остаток')),
                ('category', mptt.fields.TreeForeignKey(help_text='Выберите категорию товара', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='products.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProcessorSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('includes_cooler', models.BooleanField(default=False, help_text='Отметьте, если процессор включает кулер', verbose_name='Кулер в комплекте')),
                ('thermal_interface', models.BooleanField(default=False, verbose_name='Термоинтерфейс в комплекте')),
                ('socket', models.CharField(default='—', help_text='Например: AM5', max_length=50, verbose_name='Сокет')),
                ('cores', models.PositiveIntegerField(default=0, help_text='Физические ядра', verbose_name='Общее количество ядер')),
                ('performance_cores', models.PositiveIntegerField(default=0, verbose_name='Производительные ядра')),
                ('efficiency_cores', models.PositiveIntegerField(default=0, verbose_name='Энергоэффективные ядра')),
                ('threads', models.PositiveIntegerField(default=0, verbose_name='Максимальное число потоков')),
                ('l2_cache', models.CharField(default='—', help_text='Например: 6 МБ', max_length=20, verbose_name='Кэш L2')),
                ('l3_cache', models.CharField(default='—', help_text='Например: 32 МБ', max_length=20, verbose_name='Кэш L3')),
                ('lithography', models.CharField(default='—', help_text='Например: TSMC 5nm FinFET', max_length=50, verbose_name='Техпроцесс')),
                ('core_name', models.CharField(default='—', help_text='Например: AMD Raphael', max_length=50, verbose_name='Архитектура ядра')),
                ('base_freq', models.FloatField(default=0.0, verbose_name='Базовая частота (ГГц)')),
                ('max_turbo_freq', models.FloatField(default=0.0, verbose_name='Макс. турбо-частота (ГГц)')),
                ('efficiency_base_freq', models.FloatField(default=0.0, verbose_name='Базовая частота эн. ядер')),
                ('efficiency_turbo_freq', models.FloatField(default=0.0, verbose_name='Турбо-частота эн. ядер')),
                ('multiplier_unlocked', models.BooleanField(default=False, verbose_name='Разблокированный множитель')),
                ('memory_type', models.CharField(default='—', help_text='Например: DDR5', max_length=50, verbose_name='Тип памяти')),
                ('max_memory', models.PositiveIntegerField(default=0, verbose_name='Макс. объем памяти (ГБ)')),
                ('memory_channels', models.PositiveIntegerField(default=2, verbose_name='Количество каналов')),
                ('memory_frequency', models.CharField(default='—', help_text='Например: DDR5-5200', max_length=20, verbose_name='Частота памяти')),
                ('ecc_support', models.BooleanField(default=False, verbose_name='Поддержка ECC')),
                ('tdp', models.PositiveIntegerField(default=0, verbose_name='TDP (Вт)')),
                ('base_tdp', models.PositiveIntegerField(default=65, verbose_name='Базовое тепловыделение')),
                ('max_temp', models.PositiveIntegerField(default=0, verbose_name='Макс. температура (°C)')),
                ('integrated_gpu', models.BooleanField(default=False, verbose_name='Интегрированная графика')),
                ('pcie_version', models.CharField(default='—', max_length=50, verbose_name='Версия PCI Express')),
                ('pcie_lanes', models.PositiveIntegerField(default=24, verbose_name='Число линий PCIe')),
                ('virtualization', models.BooleanField(default=True, verbose_name='Виртуализация')),
                ('features', models.TextField(blank=True, default='—', help_text='Например: поддержка AMD EXPO', verbose_name='Особенности')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики процессора',
                'verbose_name_plural': 'Характеристики процессоров',
            },
        ),
        migrations.CreateModel(
            name='MotherboardSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(default='черный', max_length=50, verbose_name='Цвет')),
                ('form_factor', models.CharField(default='—', help_text='Например: Standard-ATX', max_length=50, verbose_name='Форм-фактор')),
                ('dimensions', models.CharField(default='—', help_text='Например: 305x244 мм', max_length=50, verbose_name='Размеры (ШхВ)')),
                ('socket', models.CharField(default='—', help_text='Например: AM5', max_length=50, verbose_name='Сокет')),
                ('chipset', models.CharField(default='—', help_text='Например: AMD B650', max_length=50, verbose_name='Чипсет')),
                ('compatible_cores', models.CharField(blank=True, max_length=100, verbose_name='Совместимые ядра')),
                ('memory_type', models.CharField(default='—', help_text='Например: DDR5', max_length=50, verbose_name='Тип памяти')),
                ('memory_slots', models.PositiveIntegerField(default=0, verbose_name='Слоты памяти')),
                ('memory_channels', models.PositiveIntegerField(default=2, verbose_name='Каналы памяти')),
                ('max_memory', models.PositiveIntegerField(default=0, verbose_name='Макс. объем памяти (ГБ)')),
                ('base_memory_freq', models.PositiveIntegerField(default=0, verbose_name='Базовая частота (МГц)')),
                ('oc_memory_freq', models.CharField(default='—', help_text='Перечислите через запятую', max_length=200, verbose_name='Частота в разгоне')),
                ('pcie_version', models.CharField(default='—', max_length=50, verbose_name='PCI Express')),
                ('pcie_x16_slots', models.TextField(default='—', verbose_name='Слоты PCIe x16')),
                ('multi_gpu_support', models.CharField(blank=True, max_length=50, verbose_name='Поддержка Multi-GPU')),
                ('pcie_x1_slots', models.PositiveIntegerField(default=0, verbose_name='Слоты PCIe x1')),
                ('m2_slots', models.PositiveIntegerField(default=0, verbose_name='Разъемы M.2')),
                ('m2_details', models.TextField(blank=True, verbose_name='Конфигурация M.2')),
                ('sata_ports', models.PositiveIntegerField(default=0, verbose_name='Порты SATA')),
                ('nvme_raid', models.CharField(blank=True, max_length=50, verbose_name='NVMe RAID')),
                ('usb_ports', models.TextField(default='—', help_text='Формат: Type-A: 3x USB 3.2 Gen2', verbose_name='Порты USB')),
                ('video_ports', models.CharField(blank=True, max_length=100, verbose_name='Видеовыходы')),
                ('audio_ports', models.PositiveIntegerField(default=0, verbose_name='Аудиоразъемы')),
                ('internal_headers', models.TextField(default='—', help_text='USB/ARGB/RGB/вентиляторы', verbose_name='Внутренние разъемы')),
                ('lan_speed', models.CharField(default='—', max_length=50, verbose_name='Скорость LAN')),
                ('wifi', models.CharField(blank=True, max_length=50, verbose_name='Wi-Fi')),
                ('bluetooth', models.CharField(blank=True, max_length=50, verbose_name='Bluetooth')),
                ('audio_chipset', models.CharField(default='—', max_length=100, verbose_name='Звуковой чип')),
                ('power_phases', models.CharField(default='—', max_length=50, verbose_name='Фазы питания')),
                ('cooling', models.TextField(default='—', help_text='Пассивное/активное', verbose_name='Охлаждение')),
                ('bios_features', models.TextField(blank=True, verbose_name='BIOS и управление')),
                ('layers', models.PositiveIntegerField(default=6, verbose_name='Слои PCB')),
                ('features', models.TextField(default='—', help_text='Например: TPM 2.0, AMD EXPO', verbose_name='Особенности')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики материнской платы',
                'verbose_name_plural': 'Характеристики материнских плат',
            },
        ),
        migrations.CreateModel(
            name='M2SSDSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField(default=0, verbose_name='Объем накопителя (ГБ)')),
                ('form_factor', models.CharField(default='2280', max_length=50, verbose_name='Форм-фактор')),
                ('interface', models.CharField(default='—', help_text='Например: PCIe 3.0 x4', max_length=50, verbose_name='Интерфейс')),
                ('m2_key', models.CharField(default='M', max_length=5, verbose_name='Ключ разъема')),
                ('nvme', models.BooleanField(default=True, verbose_name='NVMe')),
                ('controller', models.CharField(default='—', max_length=100, verbose_name='Контроллер')),
                ('cell_type', models.CharField(default='—', help_text='Например: 3 бит TLC', max_length=50, verbose_name='Тип ячеек')),
                ('memory_structure', models.CharField(default='3D NAND', max_length=50, verbose_name='Структура памяти')),
                ('dram_buffer', models.BooleanField(default=True, verbose_name='DRAM буфер')),
                ('dram_size', models.PositiveIntegerField(default=0, null=True, verbose_name='Объем DRAM (МБ)')),
                ('read_speed', models.PositiveIntegerField(default=0, verbose_name='Скорость чтения (МБ/с)')),
                ('write_speed', models.PositiveIntegerField(default=0, verbose_name='Скорость записи (МБ/с)')),
                ('tbw', models.PositiveIntegerField(default=0, help_text='Максимальный ресурс записи в ТБ', verbose_name='TBW')),
                ('dwpd', models.FloatField(default=0.0, help_text='Daily Write Probability', verbose_name='DWPD')),
                ('heatsink', models.BooleanField(default=False, verbose_name='Радиатор в комплекте')),
                ('power_consumption', models.FloatField(default=0.0, verbose_name='Энергопотребление (Вт)')),
                ('length', models.PositiveIntegerField(default=0, verbose_name='Длина (мм)')),
                ('width', models.PositiveIntegerField(default=22, verbose_name='Ширина (мм)')),
                ('thickness', models.FloatField(default=0.0, verbose_name='Толщина (мм)')),
                ('weight', models.PositiveIntegerField(default=0, verbose_name='Вес (г)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики M.2 NVMe',
                'verbose_name_plural': 'Характеристики M.2 NVMe',
            },
        ),
        migrations.CreateModel(
            name='HardDriveSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField(default=0, verbose_name='Объем накопителя (ТБ)')),
                ('cache_size', models.PositiveIntegerField(default=0, verbose_name='Кэш-память (МБ)')),
                ('spindle_speed', models.PositiveIntegerField(default=0, verbose_name='Скорость вращения (об/мин)')),
                ('interface', models.CharField(default='SATA III', max_length=50, verbose_name='Интерфейс')),
                ('interface_speed', models.CharField(default='6 Гбит/с', max_length=50, verbose_name='Пропускная способность')),
                ('raid_support', models.BooleanField(default=False, verbose_name='Поддержка RAID')),
                ('recording_tech', models.CharField(choices=[('CMR', 'CMR'), ('SMR', 'SMR')], default='CMR', max_length=3, verbose_name='Технология записи')),
                ('shock_resistance', models.PositiveIntegerField(default=0, verbose_name='Ударостойкость (G)')),
                ('workload', models.PositiveIntegerField(default=0, help_text='В тысячах циклов', verbose_name='Циклов парковки (тыс.)')),
                ('helium', models.BooleanField(default=False, verbose_name='Гелиевое наполнение')),
                ('noise_operating', models.PositiveIntegerField(default=0, verbose_name='Шум при работе (дБ)')),
                ('noise_idle', models.PositiveIntegerField(default=0, verbose_name='Шум в простое (дБ)')),
                ('transfer_rate', models.PositiveIntegerField(default=0, verbose_name='Макс. скорость передачи (МБ/с)')),
                ('latency', models.FloatField(default=0.0, verbose_name='Задержка (мс)')),
                ('max_power', models.FloatField(default=0.0, verbose_name='Макс. энергопотребление (Вт)')),
                ('idle_power', models.FloatField(default=0.0, verbose_name='Энергопотребление в простое (Вт)')),
                ('max_temp', models.PositiveIntegerField(default=0, verbose_name='Макс. температура (°C)')),
                ('width', models.FloatField(default=0.0, verbose_name='Ширина (мм)')),
                ('length', models.FloatField(default=0.0, verbose_name='Длина (мм)')),
                ('thickness', models.FloatField(default=0.0, verbose_name='Толщина (мм)')),
                ('weight', models.PositiveIntegerField(default=0, verbose_name='Вес (г)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики HDD',
                'verbose_name_plural': 'Характеристики жестких дисков',
            },
        ),
        migrations.CreateModel(
            name='CoolerSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('socket_support', models.TextField(default='—', help_text='Перечислите через запятую', verbose_name='Поддерживаемые сокеты')),
                ('tdp', models.PositiveIntegerField(default=0, verbose_name='Рассеиваемая мощность (Вт)')),
                ('construction_type', models.CharField(choices=[('tower', 'Башенный'), ('low_profile', 'Низкопрофильный'), ('top_flow', 'Верхний обдув')], default='tower', max_length=50, verbose_name='Тип конструкции')),
                ('base_material', models.CharField(default='—', max_length=50, verbose_name='Материал основания')),
                ('heatsink_material', models.CharField(default='—', max_length=50, verbose_name='Материал радиатора')),
                ('heat_pipes', models.PositiveIntegerField(default=0, verbose_name='Тепловые трубки')),
                ('pipe_diameter', models.FloatField(default=0.0, verbose_name='Диаметр трубок (мм)')),
                ('nickel_plating', models.TextField(blank=True, verbose_name='Никелированное покрытие')),
                ('heatsink_color', models.CharField(default='—', max_length=50, verbose_name='Цвет радиатора')),
                ('included_fans', models.PositiveIntegerField(default=0, verbose_name='Вентиляторы в комплекте')),
                ('fan_size', models.CharField(default='—', help_text='Например: 120x120 мм', max_length=50, verbose_name='Размер вентиляторов')),
                ('fan_connector', models.CharField(default='4 pin', max_length=20, verbose_name='Разъем питания')),
                ('max_rpm', models.PositiveIntegerField(default=0, verbose_name='Макс. скорость (об/мин)')),
                ('min_rpm', models.PositiveIntegerField(default=0, verbose_name='Мин. скорость (об/мин)')),
                ('airflow', models.CharField(default='—', help_text='Например: 67.88 CFM', max_length=50, verbose_name='Воздушный поток')),
                ('noise_level', models.FloatField(default=0.0, verbose_name='Уровень шума (дБ)')),
                ('bearing_type', models.CharField(default='—', max_length=50, verbose_name='Тип подшипника')),
                ('thermal_paste', models.BooleanField(default=False, verbose_name='Термопаста в комплекте')),
                ('rgb_lighting', models.BooleanField(default=False, verbose_name='Подсветка')),
                ('height', models.PositiveIntegerField(default=0, verbose_name='Высота (мм)')),
                ('width', models.PositiveIntegerField(default=0, verbose_name='Ширина (мм)')),
                ('length', models.PositiveIntegerField(default=0, verbose_name='Длина (мм)')),
                ('weight', models.PositiveIntegerField(default=0, verbose_name='Вес (г)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики кулера',
                'verbose_name_plural': 'Характеристики кулеров',
            },
        ),
        migrations.CreateModel(
            name='CaseSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case_type', models.CharField(default='—', help_text='Например: Mid-Tower', max_length=50, verbose_name='Типоразмер')),
                ('dimensions', models.CharField(default='—', help_text='Например: 415x300x400 мм', max_length=100, verbose_name='Габариты (ДxШxВ)')),
                ('motherboard_orientation', models.CharField(default='вертикально', max_length=20, verbose_name='Ориентация платы')),
                ('color', models.CharField(default='черный', max_length=50, verbose_name='Цвет')),
                ('material', models.TextField(default='—', help_text='Например: сталь, стекло', verbose_name='Материалы')),
                ('window', models.BooleanField(default=False, verbose_name='Боковое окно')),
                ('window_material', models.CharField(blank=True, max_length=50, verbose_name='Материал окна')),
                ('rgb_type', models.CharField(blank=True, max_length=50, verbose_name='Тип подсветки')),
                ('rgb_control', models.CharField(blank=True, max_length=100, verbose_name='Управление подсветкой')),
                ('motherboard_form_factors', models.CharField(default='—', help_text='Например: ATX, Micro-ATX', max_length=200, verbose_name='Форм-факторы плат')),
                ('psu_location', models.CharField(default='нижнее', max_length=50, verbose_name='Размещение БП')),
                ('max_gpu_length', models.PositiveIntegerField(default=0, verbose_name='Макс. длина видеокарты (мм)')),
                ('max_cooler_height', models.PositiveIntegerField(default=0, verbose_name='Макс. высота кулера (мм)')),
                ('drive_bays', models.TextField(default='—', help_text='2.5", 3.5", 5.25"', verbose_name='Отсеки для накопителей')),
                ('included_fans', models.TextField(default='—', verbose_name='Вентиляторы в комплекте')),
                ('fan_support', models.TextField(default='—', help_text='Размещение и размеры', verbose_name='Поддержка вентиляторов')),
                ('radiator_support', models.TextField(default='—', help_text='Размеры радиаторов', verbose_name='Поддержка СЖО')),
                ('front_io', models.TextField(default='—', help_text='USB, аудио и т.д.', verbose_name='Разъемы на панели')),
                ('cable_management', models.BooleanField(default=True, verbose_name='Прокладка кабелей')),
                ('dust_filters', models.BooleanField(default=False, verbose_name='Пылевые фильтры')),
                ('tool_free', models.BooleanField(default=False, verbose_name='Безвинтовое крепление')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики корпуса',
                'verbose_name_plural': 'Характеристики корпусов',
            },
        ),
        migrations.CreateModel(
            name='CaseFanSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fan_quantity', models.PositiveIntegerField(default=1, verbose_name='Количество в комплекте')),
                ('frame_color', models.CharField(default='черный', max_length=50, verbose_name='Цвет каркаса')),
                ('blade_color', models.CharField(default='—', max_length=50, verbose_name='Цвет крыльчатки')),
                ('rgb_type', models.CharField(blank=True, max_length=50, verbose_name='Тип подсветки')),
                ('rgb_source', models.CharField(blank=True, max_length=100, verbose_name='Источник подсветки')),
                ('size', models.CharField(default='—', help_text='Например: 120x120 мм', max_length=50, verbose_name='Размер')),
                ('thickness', models.PositiveIntegerField(default=0, verbose_name='Толщина (мм)')),
                ('bearing_type', models.CharField(default='—', max_length=100, verbose_name='Тип подшипника')),
                ('anti_vibration', models.BooleanField(default=False, verbose_name='Антивибрационные прокладки')),
                ('max_rpm', models.PositiveIntegerField(default=0, verbose_name='Макс. скорость (об/мин)')),
                ('min_rpm', models.PositiveIntegerField(default=0, verbose_name='Мин. скорость (об/мин)')),
                ('airflow', models.CharField(default='—', help_text='Например: 68.2 CFM', max_length=50, verbose_name='Воздушный поток')),
                ('static_pressure', models.CharField(default='—', help_text='Например: 18.3 Па', max_length=50, verbose_name='Статическое давление')),
                ('max_noise', models.FloatField(default=0.0, verbose_name='Макс. шум (дБ)')),
                ('min_noise', models.FloatField(default=0.0, verbose_name='Мин. шум (дБ)')),
                ('connector_type', models.CharField(default='—', max_length=100, verbose_name='Разъем питания')),
                ('pwm_control', models.BooleanField(default=True, verbose_name='PWM управление')),
                ('voltage', models.FloatField(default=0.0, verbose_name='Напряжение (В)')),
                ('current', models.FloatField(default=0.0, verbose_name='Ток (мА)')),
                ('rgb_connector', models.CharField(blank=True, max_length=50, verbose_name='Разъем подсветки')),
                ('controller_included', models.BooleanField(default=False, verbose_name='Контроллер в комплекте')),
                ('remote_control', models.BooleanField(default=False, verbose_name='ПДУ в комплекте')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики вентилятора',
                'verbose_name_plural': 'Характеристики вентиляторов',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Рекомендуемый размер: 800x800px', upload_to='products/%Y/%m/%d/', verbose_name='Изображение')),
                ('is_main', models.BooleanField(default=False, help_text='Отображать первым в галерее', verbose_name='Главное изображение')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Изображение товара',
                'verbose_name_plural': 'Изображения товаров',
            },
        ),
        migrations.CreateModel(
            name='PSUSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wattage', models.PositiveIntegerField(default=0, verbose_name='Номинальная мощность (Вт)')),
                ('form_factor', models.CharField(default='ATX', max_length=50, verbose_name='Форм-фактор')),
                ('color', models.CharField(default='черный', max_length=50, verbose_name='Цвет')),
                ('modularity', models.CharField(choices=[('full', 'Полностью модульный'), ('semi', 'Частично модульный'), ('non', 'Немодульный')], default='non', max_length=20, verbose_name='Модульность')),
                ('cable_sleeving', models.BooleanField(default=False, verbose_name='Оплетка кабелей')),
                ('rgb_lighting', models.BooleanField(default=False, verbose_name='Подсветка')),
                ('main_connector', models.CharField(default='20+4 pin', max_length=50, verbose_name='Основной разъем')),
                ('cpu_connectors', models.PositiveIntegerField(default=0, verbose_name='Разъемы CPU (4+4 pin)')),
                ('pcie_connectors', models.PositiveIntegerField(default=0, verbose_name='Разъемы PCI-E (6+2 pin)')),
                ('sata_connectors', models.PositiveIntegerField(default=0, verbose_name='Разъемы SATA')),
                ('molex_connectors', models.PositiveIntegerField(default=0, verbose_name='Разъемы Molex')),
                ('main_cable_length', models.PositiveIntegerField(default=0, verbose_name='Длина основного кабеля (мм)')),
                ('cpu_cable_length', models.PositiveIntegerField(default=0, verbose_name='Длина кабеля CPU (мм)')),
                ('pcie_cable_length', models.PositiveIntegerField(default=0, verbose_name='Длина кабеля PCI-E (мм)')),
                ('psu_standard', models.CharField(default='—', help_text='Например: ATX 12V 2.31', max_length=50, verbose_name='Стандарт')),
                ('efficiency_cert', models.CharField(choices=[('none', 'Нет'), ('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('titanium', 'Titanium')], default='none', max_length=20, verbose_name='Сертификат 80 PLUS')),
                ('pfc_type', models.CharField(choices=[('active', 'Активный'), ('passive', 'Пассивный')], default='active', max_length=20, verbose_name='PFC')),
                ('protections', models.TextField(default='—', help_text='Например: OCP, OVP, SCP', verbose_name='Защиты')),
                ('fan_size', models.CharField(default='—', help_text='Например: 120 мм', max_length=50, verbose_name='Вентилятор')),
                ('fan_control', models.BooleanField(default=True, verbose_name='Регулировка оборотов')),
                ('zero_rpm', models.BooleanField(default=False, verbose_name='Режим 0 дБ')),
                ('dimensions', models.CharField(default='—', help_text='Например: 160x150x86 мм', max_length=100, verbose_name='Размеры (ДxШxВ)')),
                ('weight', models.FloatField(default=0.0, verbose_name='Вес (кг)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики БП',
                'verbose_name_plural': 'Характеристики БП',
            },
        ),
        migrations.CreateModel(
            name='RAMSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memory_type', models.CharField(default='—', help_text='Например: DDR5', max_length=20, verbose_name='Тип памяти')),
                ('module_type', models.CharField(default='—', help_text='Например: UDIMM', max_length=50, verbose_name='Тип модуля')),
                ('kit_quantity', models.PositiveIntegerField(default=1, verbose_name='Количество модулей')),
                ('total_capacity', models.PositiveIntegerField(default=0, verbose_name='Общий объем комплекта (ГБ)')),
                ('module_capacity', models.PositiveIntegerField(default=0, verbose_name='Объем одного модуля (ГБ)')),
                ('frequency', models.PositiveIntegerField(default=0, verbose_name='Базовая частота (МГц)')),
                ('expo_profiles', models.TextField(blank=True, help_text='Формат: 5600 МГц (36-38-38)', verbose_name='Профили AMD EXPO')),
                ('xmp_profiles', models.TextField(blank=True, help_text='Формат: 5600 МГц (36-38-38)', verbose_name='Профили Intel XMP')),
                ('cas_latency', models.PositiveIntegerField(default=0, verbose_name='CL')),
                ('trcd', models.PositiveIntegerField(default=0, verbose_name='tRCD')),
                ('trp', models.PositiveIntegerField(default=0, verbose_name='tRP')),
                ('heatsink', models.BooleanField(default=False, verbose_name='Радиатор')),
                ('heatsink_color', models.CharField(blank=True, max_length=50, verbose_name='Цвет радиатора')),
                ('height', models.FloatField(default=0.0, verbose_name='Высота (мм)')),
                ('low_profile', models.BooleanField(default=False, verbose_name='Low Profile')),
                ('voltage', models.FloatField(default=0.0, verbose_name='Напряжение (В)')),
                ('ecc', models.BooleanField(default=False, verbose_name='ECC')),
                ('registered', models.BooleanField(default=False, verbose_name='Регистровая')),
                ('rank', models.CharField(choices=[('1R', 'Одноранговая'), ('2R', 'Двухранговая')], default='1R', max_length=20, verbose_name='Ранговость')),
                ('on_die_ecc', models.BooleanField(default=False, verbose_name='On-Die ECC')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики оперативной памяти',
                'verbose_name_plural': 'Характеристики оперативной памяти',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=1000, verbose_name='Текст отзыва')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=5, verbose_name='Оценка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product', verbose_name='Товар')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SSDSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacity', models.PositiveIntegerField(default=0, verbose_name='Объем накопителя (ГБ)')),
                ('interface', models.CharField(default='SATA', max_length=50, verbose_name='Интерфейс')),
                ('nvme', models.BooleanField(default=False, verbose_name='NVMe')),
                ('controller', models.CharField(default='—', max_length=100, verbose_name='Контроллер')),
                ('cell_type', models.CharField(default='—', help_text='Например: 3 бит TLC', max_length=50, verbose_name='Тип ячеек')),
                ('memory_structure', models.CharField(default='—', help_text='Например: 3D NAND', max_length=50, verbose_name='Структура памяти')),
                ('dram_buffer', models.BooleanField(default=False, verbose_name='DRAM буфер')),
                ('read_speed', models.PositiveIntegerField(default=0, verbose_name='Скорость чтения (МБ/с)')),
                ('write_speed', models.PositiveIntegerField(default=0, verbose_name='Скорость записи (МБ/с)')),
                ('tbw', models.PositiveIntegerField(default=0, help_text='Максимальный ресурс записи в ТБ', verbose_name='TBW')),
                ('dwpd', models.FloatField(default=0.0, help_text='Daily Write Probability', verbose_name='DWPD')),
                ('shock_resistance', models.PositiveIntegerField(default=0, help_text='G-сила', verbose_name='Ударопрочность')),
                ('power_consumption', models.FloatField(default=0.0, verbose_name='Энергопотребление (Вт)')),
                ('width', models.PositiveIntegerField(default=0, verbose_name='Ширина (мм)')),
                ('length', models.PositiveIntegerField(default=0, verbose_name='Длина (мм)')),
                ('thickness', models.PositiveIntegerField(default=0, verbose_name='Толщина (мм)')),
                ('weight', models.PositiveIntegerField(default=0, verbose_name='Вес (г)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики SSD',
                'verbose_name_plural': 'Характеристики SSD',
            },
        ),
        migrations.CreateModel(
            name='ThermalPasteSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(default=0.0, help_text='Общий вес термопасты в упаковке', verbose_name='Вес (г)')),
                ('thermal_conductivity', models.FloatField(default=0.0, help_text='Коэффициент теплопроводности', verbose_name='Теплопроводность (Вт/м·К)')),
                ('packaging', models.CharField(choices=[('syringe', 'Шприц'), ('tube', 'Тюбик'), ('packet', 'Пакетик')], default='syringe', max_length=50, verbose_name='Упаковка')),
                ('max_temp', models.IntegerField(default=0, verbose_name='Макс. температура (°C)')),
                ('min_temp', models.IntegerField(default=0, verbose_name='Мин. температура (°C)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики термопасты',
                'verbose_name_plural': 'Характеристики термопаст',
            },
        ),
        migrations.CreateModel(
            name='VideoCardSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(default='черный', max_length=50, verbose_name='Цвет')),
                ('mining_support', models.BooleanField(default=False, verbose_name='Для майнинга')),
                ('lhr', models.BooleanField(default=False, help_text='Ограничение хеш-рейта', verbose_name='LHR')),
                ('gpu_model', models.CharField(default='—', help_text='Например: GeForce RTX 5070 Ti', max_length=100, verbose_name='Модель GPU')),
                ('architecture', models.CharField(default='—', help_text='Например: NVIDIA Blackwell', max_length=50, verbose_name='Архитектура')),
                ('lithography', models.CharField(default='—', help_text='Например: 5 нм', max_length=20, verbose_name='Техпроцесс')),
                ('alu_units', models.PositiveIntegerField(default=0, verbose_name='Вычислительные блоки')),
                ('ray_tracing', models.BooleanField(default=False, verbose_name='Трассировка лучей')),
                ('base_clock', models.PositiveIntegerField(default=0, verbose_name='Базовая частота (МГц)')),
                ('boost_clock', models.PositiveIntegerField(default=0, verbose_name='Турбочастота (МГц)')),
                ('vram_size', models.PositiveIntegerField(default=0, verbose_name='Объем памяти (ГБ)')),
                ('vram_type', models.CharField(default='—', help_text='Например: GDDR7', max_length=20, verbose_name='Тип памяти')),
                ('memory_bus', models.PositiveIntegerField(default=0, verbose_name='Разрядность шины (бит)')),
                ('memory_bandwidth', models.CharField(default='—', help_text='Например: 896 ГБ/с', max_length=50, verbose_name='Пропускная способность')),
                ('memory_freq', models.PositiveIntegerField(default=0, verbose_name='Эффективная частота (МГц)')),
                ('video_outputs', models.TextField(default='—', help_text='Формат: 3x DisplayPort 2.1b, 1x HDMI 2.1b', verbose_name='Видеоразъемы')),
                ('max_resolution', models.CharField(default='—', help_text='Например: 7680x4320', max_length=50, verbose_name='Макс. разрешение')),
                ('monitors_support', models.PositiveIntegerField(default=0, verbose_name='Подключение мониторов')),
                ('pcie_version', models.CharField(default='—', help_text='Например: 5.0', max_length=20, verbose_name='PCI Express')),
                ('power_connectors', models.CharField(default='—', help_text='Например: 16 pin (12V-2x6)', max_length=100, verbose_name='Разъемы питания')),
                ('recommended_psu', models.PositiveIntegerField(default=0, verbose_name='Блок питания (Вт)')),
                ('tdp', models.PositiveIntegerField(default=0, verbose_name='Потребление (Вт)')),
                ('cooling_type', models.CharField(default='—', help_text='Активное/пассивное/гибридное', max_length=50, verbose_name='Тип охлаждения')),
                ('fans', models.PositiveIntegerField(default=0, verbose_name='Количество вентиляторов')),
                ('liquid_cooling', models.BooleanField(default=False, verbose_name='СЖО')),
                ('slots_occupied', models.PositiveIntegerField(default=0, verbose_name='Занимаемые слоты')),
                ('dimensions', models.CharField(default='—', help_text='Например: 332x127x60 мм', max_length=100, verbose_name='Габариты (ДхШхТ)')),
                ('rgb_lighting', models.BooleanField(default=False, verbose_name='Подсветка')),
                ('bios_switch', models.BooleanField(default=False, verbose_name='Переключатель BIOS')),
                ('features', models.TextField(blank=True, default='—', help_text='Например: режим 0 дБ', verbose_name='Особенности')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики видеокарты',
                'verbose_name_plural': 'Характеристики видеокарт',
            },
        ),
        migrations.CreateModel(
            name='WaterCoolingSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooling_type', models.CharField(default='СЖО', max_length=50, verbose_name='Тип системы')),
                ('serviceable', models.BooleanField(default=False, verbose_name='Обслуживаемая')),
                ('color', models.CharField(default='черный', max_length=50, verbose_name='Цвет')),
                ('rgb_type', models.CharField(blank=True, max_length=50, verbose_name='Тип подсветки')),
                ('rgb_components', models.CharField(default='—', help_text='Например: вентилятор, водоблок', max_length=100, verbose_name='Источники подсветки')),
                ('socket_support', models.TextField(default='—', verbose_name='Поддерживаемые сокеты')),
                ('block_material', models.CharField(default='—', max_length=50, verbose_name='Материал водоблока')),
                ('block_dimensions', models.CharField(default='—', max_length=100, verbose_name='Размеры водоблока (ДxШxВ)')),
                ('radiator_size', models.CharField(default='—', help_text='Например: 360 мм', max_length=100, verbose_name='Размер радиатора')),
                ('tdp', models.PositiveIntegerField(default=0, verbose_name='Рассеиваемая мощность (Вт)')),
                ('radiator_material', models.CharField(default='—', max_length=50, verbose_name='Материал радиатора')),
                ('radiator_dimensions', models.CharField(default='—', max_length=100, verbose_name='Габариты радиатора (ДxШxТ)')),
                ('fan_quantity', models.PositiveIntegerField(default=0, verbose_name='Количество вентиляторов')),
                ('fan_size', models.CharField(default='—', max_length=50, verbose_name='Размер вентиляторов')),
                ('fan_rpm', models.CharField(default='—', help_text='Например: 600-1800 об/мин', max_length=50, verbose_name='Скорость вращения')),
                ('fan_noise', models.CharField(default='—', help_text='Например: 11.2-32.5 дБ', max_length=50, verbose_name='Уровень шума')),
                ('fan_airflow', models.CharField(default='—', max_length=50, verbose_name='Воздушный поток')),
                ('pump_noise', models.FloatField(default=0.0, verbose_name='Шум помпы (дБ)')),
                ('pump_speed', models.PositiveIntegerField(default=0, verbose_name='Скорость помпы (об/мин)')),
                ('tube_material', models.CharField(default='—', max_length=50, verbose_name='Материал трубок')),
                ('transparent_tubes', models.BooleanField(default=False, verbose_name='Прозрачные трубки')),
                ('thermal_paste', models.BooleanField(default=False, verbose_name='Термопаста в комплекте')),
                ('included_accessories', models.TextField(blank=True, default='—', verbose_name='Комплектация')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_specs', to='products.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Характеристики СЖО',
                'verbose_name_plural': 'Характеристики систем охлаждения',
            },
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='products_ca_slug_da4386_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='products_pr_sku_ca0cdc_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['slug'], name='products_pr_slug_3edc0c_idx'),
        ),
        migrations.AddConstraint(
            model_name='processorspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_processor_specs'),
        ),
        migrations.AddConstraint(
            model_name='motherboardspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_motherboard_specs'),
        ),
        migrations.AddConstraint(
            model_name='m2ssdspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_m2ssd_specs'),
        ),
        migrations.AddConstraint(
            model_name='harddrivespecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_hdd_specs'),
        ),
        migrations.AddConstraint(
            model_name='coolerspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_cooler_specs'),
        ),
        migrations.AddConstraint(
            model_name='casespecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_case_specs'),
        ),
        migrations.AddConstraint(
            model_name='casefanspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_casefan_specs'),
        ),
        migrations.AddConstraint(
            model_name='psuspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_psu_specs'),
        ),
        migrations.AddConstraint(
            model_name='ramspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_ram_specs'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'product')},
        ),
        migrations.AddConstraint(
            model_name='ssdspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_ssd_specs'),
        ),
        migrations.AddConstraint(
            model_name='thermalpastespecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_thermalpaste_specs'),
        ),
        migrations.AddConstraint(
            model_name='videocardspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_videocard_specs'),
        ),
        migrations.AddConstraint(
            model_name='watercoolingspecs',
            constraint=models.UniqueConstraint(fields=('product',), name='unique_watercooling_specs'),
        ),
    ]
